import React, { useState, useEffect } from 'react';
import { MdMovieFilter } from 'react-icons/md';
import '../styles/HomeScreen.css';
import creativeProcess from '../assets/images/creative-process.png';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
import viewsImage from '../assets/images/views.jpg';
import salesImage from '../assets/images/sales.jpg';
import educationImage from '../assets/images/education.jpg';
import entertainmentImage from '../assets/images/entertainment.jpg';
import personalBrandImage from '../assets/images/personal-brand.jpg';
import noGoalImage from '../assets/images/no-goal.jpg';
import introAnimation from '../assets/videos/intro.mp4'; // –∏–ª–∏ .mp4 –µ—Å–ª–∏ –≤–∏–¥–µ–æ
import backgroundImage from '../assets/myBackground.jpg';
import GenderScreen from './GenderScreen';
import AgeScreen from './AgeScreen';
import NicheScreen from './NicheScreen';
import FinalScreen from './FinalScreen';
import { db } from '../firebase';
import { doc, getDoc, setDoc, increment } from 'firebase/firestore';

const TAGS = [
  { 
    label: '–ü—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', 
    image: viewsImage 
  },
  { 
    label: '–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç / —É—Å–ª—É–≥—É', 
    image: salesImage 
  },
  { 
    label: '–û–±—É—á–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é', 
    image: educationImage
  },
  { 
    label: '–†–∞–∑–≤–ª–µ—á—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 
    image: entertainmentImage
  },
  { 
    label: '–õ–∏—á–Ω—ã–π –ë—Ä–µ–Ω–¥', 
    image: personalBrandImage
  },
  { 
    label: '–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏', 
    image: noGoalImage
  },
];

function HomeScreen() {
  // –®–∞–≥–∏: 0 ‚Äì –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è, 1 ‚Äì –≤—ã–±–æ—Ä —Ü–µ–ª–∏, 2 ‚Äì –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.
  const [currentStep, setCurrentStep] = useState(0);
  const [eventText, setEventText] = useState('');
  const [selectedTags, setSelectedTags] = useState([]);
  const [isAnimating, setIsAnimating] = useState(false);
  const [chatId, setChatId] = useState(null);
  const [presentationType, setPresentationType] = useState(null);
  const [showIntro, setShowIntro] = useState(true);
  const [showGenderSelect, setShowGenderSelect] = useState(true);
  const [gender, setGender] = useState(null);
  const [showAgeSelect, setShowAgeSelect] = useState(true);
  const [age, setAge] = useState(null);
  const [showNicheSelect, setShowNicheSelect] = useState(true);
  const [niches, setNiches] = useState([]);
  const [showFinalScreen, setShowFinalScreen] = useState(true);
  const [isNewUser, setIsNewUser] = useState(true);
  const [isCheckingUser, setIsCheckingUser] = useState(true);

  const toggleTag = (tagLabel) => {
    setSelectedTags((prev) =>
      prev.includes(tagLabel)
        ? prev.filter((t) => t !== tagLabel)
        : [...prev, tagLabel]
    );
  };

  const handleGenerate = async () => {
    if (!eventText.trim()) {
      window.alert('‚ö†Ô∏è –û–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.');
      return;
    }

    if (!presentationType) {
      window.alert('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (—Å –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)');
      return;
    }

    setIsAnimating(true);

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
      if (chatId && chatId !== 'chat_id_not_found') {
        const userRef = doc(db, 'telegram_users', chatId);
        await setDoc(userRef, {
          lastActivity: new Date(),
          lastGenerationText: eventText,
          totalGenerations: increment(1), // –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase increment –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
          selectedTags: selectedTags,
          presentationType: presentationType
        }, { merge: true });
      }

      window.alert(`üé¨ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
–ü—Ä–µ–¥—Å—Ç–∞–≤—å, –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—é—Å–µ—Ä üíº
–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.`);

      const response = await fetch('https://us-central1-mini-ao-c2901.cloudfunctions.net/generate_scenario', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          eventText: eventText,
          selectedTags: selectedTags,
          presentationType: presentationType
        })
      });

      const result = await response.json();
      setIsAnimating(false);

      if (response.ok && result.status === 'ok') {
        if (window.Telegram) {
          window.Telegram.WebApp.close();
        }
      } else {
        window.alert('–û—à–∏–±–∫–∞: ' + result.message);
      }

    } catch (error) {
      setIsAnimating(false);
      console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', error);
      window.alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  const nextStep = () => {
    if (currentStep === 0 && !eventText.trim()) {
      window.alert('‚ö†Ô∏è –û–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.');
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, 2));
  };

  const prevStep = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const renderStepIndicator = () => (
    <div className="step-indicator-masked">
      <span className="step-text gradient-text">
        –≠—Ç–∞–ø {currentStep + 1} –∏–∑ 3
      </span>
    </div>
  );

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <>
            <div className="step-content">
              <h2 className="section-title">–û–ø–∏—à–∏, –æ —á—ë–º –±—É–¥–µ—Ç —Ç–≤–æ–π Reels ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö.</h2>
              <div className="input-wrapper">
                <div className="input-blur">
                  <textarea
                    className="search-input"
                    placeholder="–¢–∏–ø–∞: ¬´–ö–∞–∫ —è –ø–æ—à–ª–∞ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∏ –ø–æ–ø–∞–ª–∞ –≤ –Ω–µ–ª–æ–≤–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é‚Ä¶¬ª
–ò–ª–∏: ¬´–ü—Ä–æ—Å—Ç–æ: —É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥¬ª"
                    value={eventText}
                    onChange={(e) => setEventText(e.target.value)}
                    rows="3"
                    aria-label="–ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"
                  />
                </div>
              </div>
            </div>
            <div className="illustration-container">
              <img
                src={creativeProcess}
                alt="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
                className="extra-image"
              />
              <p className="illustration-text">
                –¢–≤–æ—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞ üí•
              </p>
            </div>
          </>
        );
      case 1:
        return (
          <div className="step-content">
            <h2 className="section-title">
              üëâ –ö–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è?
            </h2>
            <div className="tags-container">
              {TAGS.map(({ label, image }) => {
                const isSelected = selectedTags.includes(label);
                return (
                  <div
                    key={label}
                    className={`tag-touchable ${
                      isSelected ? 'active-tag-touchable' : ''
                    }`}
                    onClick={() => toggleTag(label)}
                    role="button"
                    aria-label={`–¶–µ–ª—å ${label}`}
                  >
                    <div
                      className={`blur-container ${
                        isSelected ? 'selected-tag-shadow' : ''
                      }`}
                    >
                      <img src={image} alt={label} className="tag-image" />
                    </div>
                    <p className="filter-label">
                      {label} {isSelected ? '‚úÖ' : ''}
                    </p>
                    <p className="hint-text">
                      –ù–∞–∂–º–∏ –¥–ª—è {isSelected ? '—Å–Ω—è—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è' : '–≤—ã–±–æ—Ä–∞'}
                    </p>
                  </div>
                );
              })}
            </div>

            <div className="presentation-type-container">
              <h3 className="presentation-type-title">
                –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π?
              </h3>
              <div className="presentation-options">
                <button
                  className={`presentation-option ${presentationType === 'voice' ? 'selected' : ''}`}
                  onClick={() => setPresentationType('voice')}
                >
                  <span className="option-icon">üéôÔ∏è</span>
                  <div className="option-content">
                    <span className="option-title">–° –≥–æ–ª–æ—Å–æ–º</span>
                    <span className="option-subtitle">–ü–æ–¥–æ–π–¥—ë—Ç, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –æ–∑–≤—É—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å–∞–º–∞</span>
                  </div>
                </button>

                <button
                  className={`presentation-option ${presentationType === 'text' ? 'selected' : ''}`}
                  onClick={() => setPresentationType('text')}
                >
                  <span className="option-icon">‚úçÔ∏è</span>
                  <div className="option-content">
                    <span className="option-title">–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ</span>
                    <span className="option-subtitle">–ò–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ Reels –±—É–¥–µ—Ç –±–µ–∑ –≥–æ–ª–æ—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–¥–ø–∏—Å–∏</span>
                  </div>
                </button>
              </div>
            </div>
          </div>
        );
      case 2:
        const selectedTagObjects = TAGS.filter((tag) =>
          selectedTags.includes(tag.label)
        );
        return (
          <div className="step-content">
            <h2 className="section-title">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è</h2>
            <p className="info-text">
              –ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è
              –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.
            </p>
            <div className="review-container">
              <p className="review-header">–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</p>
              <p className="review-text">{eventText}</p>
              <p className="review-header">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏:</p>
              {selectedTagObjects.length > 0 ? (
                <div className="tags-review-container">
                  {selectedTagObjects.map((tag) => (
                    <div key={tag.label} className="tag-review-item">
                      <img
                        src={tag.image}
                        alt={tag.label}
                        className="tag-review-image"
                      />
                      <p className="tag-review-text">{tag.label}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="review-text">–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</p>
              )}
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  const renderNavigationButtons = () => {
    if (currentStep === 0) {
      return (
        <div className="navigation-container-centered">
          <button
            className="nav-button nav-button-fixed"
            onClick={nextStep}
            aria-label="–î–∞–ª–µ–µ"
          >
            –î–∞–ª–µ–µ
          </button>
        </div>
      );
    }
    return (
      <div className="navigation-container">
        {currentStep > 0 && (
          <button className="nav-button" onClick={prevStep} aria-label="–ù–∞–∑–∞–¥">
            –ù–∞–∑–∞–¥
          </button>
        )}
        {currentStep < 2 ? (
          <button className="nav-button" onClick={nextStep} aria-label="–î–∞–ª–µ–µ">
            –î–∞–ª–µ–µ
          </button>
        ) : (
          <button
            className={`button-gradient ${
              isAnimating ? 'animating' : ''
            }`}
            onClick={handleGenerate}
            aria-label="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"
          >
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π üé¨
          </button>
        )}
      </div>
    );
  };

  useEffect(() => {
    // –ï—Å–ª–∏ –≤—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –õ–û–ö–ê–õ–¨–ù–û, –≤—Ä—è–¥ –ª–∏ window.Telegram –µ—Å—Ç—å.
    // –ú–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å:
    if (window.Telegram) {
      window.Telegram.WebApp.ready();
      
      const tg = window.Telegram.WebApp;
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = tg.initDataUnsafe?.user;
      if (user?.id) {
        setChatId(user.id);
        console.log('Chat ID –∏–∑ user:', user.id);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π chat_id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        setChatId('6045806877');
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π Chat ID');
      }
      
      const startParam = tg.initDataUnsafe?.start_param;
      if (startParam) {
        console.log('Start param:', startParam);
      }
      
      if (!chatId) {
        setChatId(tg.initDataUnsafe?.user?.id || tg.initDataUnsafe?.start_param || 'chat_id_not_found');
      }
      
      console.log('WebApp data:', tg.initDataUnsafe);
    } else {
      // –ï—Å–ª–∏ Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
      setChatId('6045806877'); 
    }
  }, [chatId]);

  useEffect(() => {
    if (window.Telegram) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
      window.Telegram.WebApp.setHeaderColor('#000000');
    }
  }, []);

  useEffect(() => {
    if (window.navigator && window.navigator.vibrate) {
      window.navigator.vibrate(200);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç—Ä–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    if (isNewUser && showIntro) {
      const timer = setTimeout(() => {
        setShowIntro(false);
      }, 5000);

      return () => clearTimeout(timer);
    }
  }, [isNewUser, showIntro]);

  const handleGenderSelect = (selectedGender) => {
    setGender(selectedGender);
    setShowGenderSelect(false);
  };

  const handleAgeSelect = (selectedAge) => {
    setAge(selectedAge);
    setShowAgeSelect(false);
  };

  const handleNicheSelect = (selectedNiches) => {
    setNiches(selectedNiches);
    setShowNicheSelect(false);
  };

  useEffect(() => {
    const checkUserInFirebase = async () => {
      if (!chatId || chatId === 'chat_id_not_found') return;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Firestore
        const userRef = doc(db, 'telegram_users', chatId);
        const userDoc = await getDoc(userRef);
        
        if (userDoc.exists()) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç—Ä–æ
          console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', chatId);
          setIsNewUser(false);
          setShowIntro(false);
          setShowGenderSelect(false);
          setShowAgeSelect(false);
          setShowNicheSelect(false);
          setShowFinalScreen(false);
        } else {
          // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç—Ä–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
          console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', chatId);
          setIsNewUser(true);
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await setDoc(userRef, {
            chatId: chatId,
            firstVisit: new Date(),
            hasCompletedOnboarding: false
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      } finally {
        setIsCheckingUser(false);
      }
    };
    
    if (chatId) {
      checkUserInFirebase();
    }
  }, [chatId]);

  const handleFinish = async () => {
    setShowFinalScreen(false);
    
    if (chatId && chatId !== 'chat_id_not_found') {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ Firestore
        const userRef = doc(db, 'telegram_users', chatId);
        await setDoc(userRef, {
          chatId: chatId,
          hasCompletedOnboarding: true,
          gender: gender,
          age: age,
          niches: niches,
          lastVisit: new Date()
        }, { merge: true });
        
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
  };

  if (isCheckingUser) {
    return (
      <div className="loading-screen">
        <div className="loading-animation"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  if (isNewUser && showIntro) {
    return (
      <div className="intro-screen">
        <video 
          autoPlay 
          loop 
          muted 
          playsInline 
          className="intro-animation-full"
        >
          <source src={introAnimation} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      </div>
    );
  }

  if (isNewUser && showGenderSelect) {
    return <GenderScreen onGenderSelect={handleGenderSelect} />;
  }

  if (isNewUser && showAgeSelect) {
    return <AgeScreen onAgeSelect={handleAgeSelect} />;
  }

  if (isNewUser && showNicheSelect) {
    return <NicheScreen onNicheSelect={handleNicheSelect} />;
  }

  if (isNewUser && showFinalScreen) {
    return <FinalScreen onFinish={handleFinish} />;
  }

  return (
    <div className="safe-area">
      <div 
        className="container"
        style={{
          backgroundImage: `url(${backgroundImage})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          borderRadius: '15px',
          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.3)'
        }}
      >
        <div className="header-row">
          <div style={{ flex: 1 }}>
            <h1 className="greeting-main" aria-label="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤">
              –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –°—Ü–µ–Ω–∞—Ä–∏–µ–≤
            </h1>
            <p className="greeting-sub">
              –ù–∞–ø–∏—à–∏ –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è reels{' '}
              <MdMovieFilter color="#FF4081" size={16} />
            </p>
          </div>
        </div>
        {renderStepIndicator()}
        {renderStepContent()}
      </div>
      {renderNavigationButtons()}
    </div>
  );
}

export default HomeScreen;
